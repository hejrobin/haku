#!/usr/bin/env php
<?php
declare(strict_types=1);

namespace Haku;

error_reporting(E_ALL & ~E_NOTICE);

define('HAKU_ROOT_PATH', __DIR__ . DIRECTORY_SEPARATOR);
define('HAKU_PHP_VERSION', '8.4.0');

if (version_compare(PHP_VERSION, HAKU_PHP_VERSION, '<')) {
	echo sprintf("Haku requires PHP %s, version %s installed.", HAKU_PHP_VERSION, PHP_VERSION);
	exit;
}

use function Haku\{
	autoloadResolver,
	loadEnvironment,
	loadBootstrap,
};

use function Haku\Console\loadConsoleServices;

$didThrow = false;

try
{
	require_once implode(DIRECTORY_SEPARATOR, [
		mb_rtrim(HAKU_ROOT_PATH, DIRECTORY_SEPARATOR),
		'vendor', 'Haku', 'bootstrap.php'
	]);

	autoloadResolver();
	loadEnvironment();
	loadBootstrap();
	loadConsoleServices();

	$engine = new Console\Engine();

	// Framework Commands
	$engine->registerCommand(new Console\Commands\Env());
	$engine->registerCommand(new Console\Commands\Version());
	$engine->registerCommand(new Console\Commands\Upgrade());
	$engine->registerCommand(new Console\Commands\Release());
	$engine->registerCommand(new Console\Commands\Okidoki());

	// Development Commands
	$engine->registerCommand(new Console\Commands\Serve());
	$engine->registerCommand(new Console\Commands\Routes());
	$engine->registerCommand(new Console\Commands\Test());
	$engine->registerCommand(new Console\Commands\Migrate());
	$engine->registerCommand(new Console\Commands\Make());

	$engine->run();

}
catch(\Throwable $throwable)
{
	print_r($throwable);
	$didThrow = true;
}
finally
{
	if ($didThrow)
	{
		exit -1;
	}

	exit;
}
